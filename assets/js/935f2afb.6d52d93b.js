"use strict";(self.webpackChunkimmer_website=self.webpackChunkimmer_website||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"Immer":[{"type":"category","label":"Basics","items":[{"type":"link","label":"Introduction","href":"/","docId":"introduction"},{"type":"link","label":"Installation","href":"/installation","docId":"installation"},{"type":"link","label":"Using produce","href":"/produce","docId":"produce"},{"type":"link","label":"Curried producers","href":"/curried-produce","docId":"curried-produce"},{"type":"link","label":"React & Immer","href":"/example-setstate","docId":"example-setstate"},{"type":"link","label":"Update patterns","href":"/update-patterns","docId":"update-patterns"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Advanced Features","items":[{"type":"link","label":"API overview","href":"/api","docId":"api"},{"type":"link","label":"Map and Set","href":"/map-set","docId":"map-set"},{"type":"link","label":"Classes","href":"/complex-objects","docId":"complex-objects"},{"type":"link","label":"Current","href":"/current","docId":"current"},{"type":"link","label":"Original","href":"/original","docId":"original"},{"type":"link","label":"Patches","href":"/patches","docId":"patches"},{"type":"link","label":"Auto freezing","href":"/freezing","docId":"freezing"},{"type":"link","label":"Returning new data from producers","href":"/return","docId":"return"},{"type":"link","label":"createDraft / finishDraft","href":"/async","docId":"async"},{"type":"link","label":"TypeScript / Flow","href":"/typescript","docId":"typescript"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Resources","items":[{"type":"link","label":"Immer performance","href":"/performance","docId":"performance"},{"type":"link","label":"External resources","href":"/resources","docId":"resources"},{"type":"link","label":"FAQ","href":"/faq","docId":"faq"},{"type":"link","label":"Pitfalls","href":"/pitfalls","docId":"pitfalls"},{"type":"link","label":"Built with Immer","href":"/built-with","docId":"built-with"},{"type":"link","label":"Supporting immer","href":"/support","docId":"support"},{"type":"link","label":"Porting to other languages","href":"/other-lang","docId":"other-lang"}],"collapsed":true,"collapsible":true}]},"docs":{"api":{"id":"api","title":"API overview","description":"| Exported name | Description | Section |","sidebar":"Immer"},"async":{"id":"async","title":"createDraft / finishDraft","description":"<div","sidebar":"Immer"},"built-with":{"id":"built-with","title":"Built with Immer","description":"- react-copy-write Immutable state with a mutable API","sidebar":"Immer"},"complex-objects":{"id":"complex-objects","title":"Classes","description":"Plain objects (objects without a prototype), arrays, Maps and Sets are always drafted by Immer. Every other object must use the immerable symbol to mark itself as compatible with Immer. When one of these objects is mutated within a producer, its prototype is preserved between copies.","sidebar":"Immer"},"current":{"id":"current","title":"Extracting the current state from a draft","description":"Immer exposes a named export current that creates a copy of the current state of the draft. This can be very useful for debugging purposes (as those objects won\'t be Proxy objects and not be logged as such). Also, references to current can be safely leaked from a produce function. Put differently, current provides a snapshot of the current state of a draft.","sidebar":"Immer"},"curried-produce":{"id":"curried-produce","title":"Curried producers","description":"<div","sidebar":"Immer"},"example-setstate":{"id":"example-setstate","title":"React & Immer","description":"<div","sidebar":"Immer"},"faq":{"id":"faq","title":"Frequently Asked Questions","description":"Q: How does Immer work?","sidebar":"Immer"},"freezing":{"id":"freezing","title":"Auto freezing","description":"<div","sidebar":"Immer"},"installation":{"id":"installation","title":"Installation","description":"<div","sidebar":"Immer"},"introduction":{"id":"introduction","title":"Introduction to Immer","description":"Immer (German for: always) is a tiny package that allows you to work with immutable state in a more convenient way.","sidebar":"Immer"},"map-set":{"id":"map-set","title":"Map and Set","description":"\u26a0 Since version 6 support for Maps and Sets has to be enabled explicitly by calling enableMapSet() once when starting your application.","sidebar":"Immer"},"original":{"id":"original","title":"Extracting the original state from a draft","description":"Immer exposes a named export original that will get the original object from the proxied instance inside produce (or return undefined for unproxied values). A good example of when this can be useful is when searching for nodes in a tree-like state using strict equality.","sidebar":"Immer"},"other-lang":{"id":"other-lang","title":"Porting to other languages","description":"Immer has been ported to other programming languages.","sidebar":"Immer"},"patches":{"id":"patches","title":"Patches","description":"<div","sidebar":"Immer"},"performance":{"id":"performance","title":"Immer performance","description":"<div","sidebar":"Immer"},"pitfalls":{"id":"pitfalls","title":"Pitfalls","description":"Performance tips","sidebar":"Immer"},"produce":{"id":"produce","title":"Using produce","description":"<div","sidebar":"Immer"},"resources":{"id":"resources","title":"External resources","description":"- Blog: The Rise of Immer in React","sidebar":"Immer"},"return":{"id":"return","title":"Returning new data from producers","description":"<div","sidebar":"Immer"},"support":{"id":"support","title":"Supporting immer","description":"Immer currently has 350.000 dependents on GitHub, and has almost 10.000.000 downloads per month. However, only the first 2 days of development has been sponsored (by Mendix), and all the development and maintenance after that has been a labor of love.","sidebar":"Immer"},"typescript":{"id":"typescript","title":"Using TypeScript or Flow","description":"<div","sidebar":"Immer"},"update-patterns":{"id":"update-patterns","title":"Update patterns","description":"Working with immutable data, before Immer, used to mean learning all the immutable update patterns.","sidebar":"Immer"}}}')}}]);